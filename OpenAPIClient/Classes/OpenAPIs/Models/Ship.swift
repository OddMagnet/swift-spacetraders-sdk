//
// Ship.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A ship */
public struct Ship: Codable, JSONEncodable, Hashable {

    /** The globally unique identifier of the ship in the following format: `[AGENT_SYMBOL]_[HEX_ID]` */
    public var symbol: String
    public var registration: ShipRegistration
    public var nav: ShipNav
    public var crew: ShipCrew
    public var frame: ShipFrame
    public var reactor: ShipReactor
    public var engine: ShipEngine
    public var modules: [ShipModule]
    public var mounts: [ShipMount]
    public var cargo: ShipCargo
    public var fuel: ShipFuel

    public init(symbol: String, registration: ShipRegistration, nav: ShipNav, crew: ShipCrew, frame: ShipFrame, reactor: ShipReactor, engine: ShipEngine, modules: [ShipModule], mounts: [ShipMount], cargo: ShipCargo, fuel: ShipFuel) {
        self.symbol = symbol
        self.registration = registration
        self.nav = nav
        self.crew = crew
        self.frame = frame
        self.reactor = reactor
        self.engine = engine
        self.modules = modules
        self.mounts = mounts
        self.cargo = cargo
        self.fuel = fuel
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case symbol
        case registration
        case nav
        case crew
        case frame
        case reactor
        case engine
        case modules
        case mounts
        case cargo
        case fuel
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(symbol, forKey: .symbol)
        try container.encode(registration, forKey: .registration)
        try container.encode(nav, forKey: .nav)
        try container.encode(crew, forKey: .crew)
        try container.encode(frame, forKey: .frame)
        try container.encode(reactor, forKey: .reactor)
        try container.encode(engine, forKey: .engine)
        try container.encode(modules, forKey: .modules)
        try container.encode(mounts, forKey: .mounts)
        try container.encode(cargo, forKey: .cargo)
        try container.encode(fuel, forKey: .fuel)
    }
}

