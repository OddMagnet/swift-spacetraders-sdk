//
// ConnectedSystem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/**  */
public struct ConnectedSystem: Codable, JSONEncodable, Hashable {

    static let symbolRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let sectorSymbolRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var symbol: String
    public var sectorSymbol: String
    public var type: SystemType
    /** The symbol of the faction that owns the connected jump gate in the system. */
    public var factionSymbol: String?
    public var x: Int
    public var y: Int
    public var distance: Int

    public init(symbol: String, sectorSymbol: String, type: SystemType, factionSymbol: String? = nil, x: Int, y: Int, distance: Int) {
        self.symbol = symbol
        self.sectorSymbol = sectorSymbol
        self.type = type
        self.factionSymbol = factionSymbol
        self.x = x
        self.y = y
        self.distance = distance
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case symbol
        case sectorSymbol
        case type
        case factionSymbol
        case x
        case y
        case distance
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(symbol, forKey: .symbol)
        try container.encode(sectorSymbol, forKey: .sectorSymbol)
        try container.encode(type, forKey: .type)
        try container.encodeIfPresent(factionSymbol, forKey: .factionSymbol)
        try container.encode(x, forKey: .x)
        try container.encode(y, forKey: .y)
        try container.encode(distance, forKey: .distance)
    }
}

