//
// MarketTradeGood.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct MarketTradeGood: Codable, JSONEncodable, Hashable {

    public enum Supply: String, Codable, CaseIterable {
        case scarce = "SCARCE"
        case limited = "LIMITED"
        case moderate = "MODERATE"
        case abundant = "ABUNDANT"
    }
    static let tradeVolumeRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let purchasePriceRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let sellPriceRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    /** The symbol of the trade good. */
    public var symbol: String
    /** The typical volume flowing through the market for this type of good. The larger the trade volume, the more stable prices will be. */
    public var tradeVolume: Int
    /** A rough estimate of the total supply of this good in the marketplace. */
    public var supply: Supply
    /** The price at which this good can be purchased from the market. */
    public var purchasePrice: Int
    /** The price at which this good can be sold to the market. */
    public var sellPrice: Int

    public init(symbol: String, tradeVolume: Int, supply: Supply, purchasePrice: Int, sellPrice: Int) {
        self.symbol = symbol
        self.tradeVolume = tradeVolume
        self.supply = supply
        self.purchasePrice = purchasePrice
        self.sellPrice = sellPrice
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case symbol
        case tradeVolume
        case supply
        case purchasePrice
        case sellPrice
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(symbol, forKey: .symbol)
        try container.encode(tradeVolume, forKey: .tradeVolume)
        try container.encode(supply, forKey: .supply)
        try container.encode(purchasePrice, forKey: .purchasePrice)
        try container.encode(sellPrice, forKey: .sellPrice)
    }
}

