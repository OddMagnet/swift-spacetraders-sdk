//
// ShipyardShip.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/**  */
public struct ShipyardShip: Codable, JSONEncodable, Hashable {

    public var type: ShipType?
    public var name: String
    public var description: String
    public var purchasePrice: Int
    public var frame: ShipFrame
    public var reactor: ShipReactor
    public var engine: ShipEngine
    public var modules: [ShipModule]
    public var mounts: [ShipMount]

    public init(type: ShipType? = nil, name: String, description: String, purchasePrice: Int, frame: ShipFrame, reactor: ShipReactor, engine: ShipEngine, modules: [ShipModule], mounts: [ShipMount]) {
        self.type = type
        self.name = name
        self.description = description
        self.purchasePrice = purchasePrice
        self.frame = frame
        self.reactor = reactor
        self.engine = engine
        self.modules = modules
        self.mounts = mounts
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case name
        case description
        case purchasePrice
        case frame
        case reactor
        case engine
        case modules
        case mounts
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encode(name, forKey: .name)
        try container.encode(description, forKey: .description)
        try container.encode(purchasePrice, forKey: .purchasePrice)
        try container.encode(frame, forKey: .frame)
        try container.encode(reactor, forKey: .reactor)
        try container.encode(engine, forKey: .engine)
        try container.encode(modules, forKey: .modules)
        try container.encode(mounts, forKey: .mounts)
    }
}

