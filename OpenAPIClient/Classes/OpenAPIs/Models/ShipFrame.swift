//
// ShipFrame.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The frame of the ship. The frame determines the number of modules and mounting points of the ship, as well as base fuel capacity. As the condition of the frame takes more wear, the ship will become more sluggish and less maneuverable. */
public struct ShipFrame: Codable, JSONEncodable, Hashable {

    public enum Symbol: String, Codable, CaseIterable {
        case probe = "FRAME_PROBE"
        case drone = "FRAME_DRONE"
        case interceptor = "FRAME_INTERCEPTOR"
        case racer = "FRAME_RACER"
        case fighter = "FRAME_FIGHTER"
        case frigate = "FRAME_FRIGATE"
        case shuttle = "FRAME_SHUTTLE"
        case explorer = "FRAME_EXPLORER"
        case miner = "FRAME_MINER"
        case lightFreighter = "FRAME_LIGHT_FREIGHTER"
        case heavyFreighter = "FRAME_HEAVY_FREIGHTER"
        case transport = "FRAME_TRANSPORT"
        case destroyer = "FRAME_DESTROYER"
        case cruiser = "FRAME_CRUISER"
        case carrier = "FRAME_CARRIER"
    }
    static let conditionRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 100, exclusiveMaximum: false, multipleOf: nil)
    static let moduleSlotsRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let mountingPointsRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fuelCapacityRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public var symbol: Symbol
    public var name: String
    public var description: String
    /** Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new. */
    public var condition: Int?
    public var moduleSlots: Int
    public var mountingPoints: Int
    public var fuelCapacity: Int
    public var requirements: ShipRequirements

    public init(symbol: Symbol, name: String, description: String, condition: Int? = nil, moduleSlots: Int, mountingPoints: Int, fuelCapacity: Int, requirements: ShipRequirements) {
        self.symbol = symbol
        self.name = name
        self.description = description
        self.condition = condition
        self.moduleSlots = moduleSlots
        self.mountingPoints = mountingPoints
        self.fuelCapacity = fuelCapacity
        self.requirements = requirements
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case symbol
        case name
        case description
        case condition
        case moduleSlots
        case mountingPoints
        case fuelCapacity
        case requirements
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(symbol, forKey: .symbol)
        try container.encode(name, forKey: .name)
        try container.encode(description, forKey: .description)
        try container.encodeIfPresent(condition, forKey: .condition)
        try container.encode(moduleSlots, forKey: .moduleSlots)
        try container.encode(mountingPoints, forKey: .mountingPoints)
        try container.encode(fuelCapacity, forKey: .fuelCapacity)
        try container.encode(requirements, forKey: .requirements)
    }
}

