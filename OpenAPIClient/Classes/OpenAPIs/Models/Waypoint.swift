//
// Waypoint.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A waypoint is a location that ships can travel to such as a Planet, Moon or Space Station. */
public struct Waypoint: Codable, JSONEncodable, Hashable {

    static let symbolRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let systemSymbolRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var symbol: String
    public var type: WaypointType
    public var systemSymbol: String
    public var x: Int
    public var y: Int
    public var orbitals: [WaypointOrbital]
    public var faction: WaypointFaction?
    /** The traits of the waypoint. */
    public var traits: [WaypointTrait]
    public var chart: Chart?

    public init(symbol: String, type: WaypointType, systemSymbol: String, x: Int, y: Int, orbitals: [WaypointOrbital], faction: WaypointFaction? = nil, traits: [WaypointTrait], chart: Chart? = nil) {
        self.symbol = symbol
        self.type = type
        self.systemSymbol = systemSymbol
        self.x = x
        self.y = y
        self.orbitals = orbitals
        self.faction = faction
        self.traits = traits
        self.chart = chart
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case symbol
        case type
        case systemSymbol
        case x
        case y
        case orbitals
        case faction
        case traits
        case chart
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(symbol, forKey: .symbol)
        try container.encode(type, forKey: .type)
        try container.encode(systemSymbol, forKey: .systemSymbol)
        try container.encode(x, forKey: .x)
        try container.encode(y, forKey: .y)
        try container.encode(orbitals, forKey: .orbitals)
        try container.encodeIfPresent(faction, forKey: .faction)
        try container.encode(traits, forKey: .traits)
        try container.encodeIfPresent(chart, forKey: .chart)
    }
}

