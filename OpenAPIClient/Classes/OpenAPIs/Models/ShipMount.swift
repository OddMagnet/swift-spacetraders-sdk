//
// ShipMount.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A mount is installed on the exterier of a ship. */
public struct ShipMount: Codable, JSONEncodable, Hashable {

    public enum Symbol: String, Codable, CaseIterable {
        case gasSiphonI = "MOUNT_GAS_SIPHON_I"
        case gasSiphonIi = "MOUNT_GAS_SIPHON_II"
        case gasSiphonIii = "MOUNT_GAS_SIPHON_III"
        case surveyorI = "MOUNT_SURVEYOR_I"
        case surveyorIi = "MOUNT_SURVEYOR_II"
        case surveyorIii = "MOUNT_SURVEYOR_III"
        case sensorArrayI = "MOUNT_SENSOR_ARRAY_I"
        case sensorArrayIi = "MOUNT_SENSOR_ARRAY_II"
        case sensorArrayIii = "MOUNT_SENSOR_ARRAY_III"
        case miningLaserI = "MOUNT_MINING_LASER_I"
        case miningLaserIi = "MOUNT_MINING_LASER_II"
        case miningLaserIii = "MOUNT_MINING_LASER_III"
        case laserCannonI = "MOUNT_LASER_CANNON_I"
        case missileLauncherI = "MOUNT_MISSILE_LAUNCHER_I"
        case turretI = "MOUNT_TURRET_I"
    }
    public enum Deposits: String, Codable, CaseIterable {
        case quartzSand = "QUARTZ_SAND"
        case siliconCrystals = "SILICON_CRYSTALS"
        case preciousStones = "PRECIOUS_STONES"
        case iceWater = "ICE_WATER"
        case ammoniaIce = "AMMONIA_ICE"
        case ironOre = "IRON_ORE"
        case copperOre = "COPPER_ORE"
        case silverOre = "SILVER_ORE"
        case aluminumOre = "ALUMINUM_ORE"
        case goldOre = "GOLD_ORE"
        case platinumOre = "PLATINUM_ORE"
        case diamonds = "DIAMONDS"
        case uraniteOre = "URANITE_ORE"
        case meritiumOre = "MERITIUM_ORE"
    }
    static let strengthRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public var symbol: Symbol
    public var name: String
    public var description: String?
    public var strength: Int?
    public var deposits: [Deposits]?
    public var requirements: ShipRequirements

    public init(symbol: Symbol, name: String, description: String? = nil, strength: Int? = nil, deposits: [Deposits]? = nil, requirements: ShipRequirements) {
        self.symbol = symbol
        self.name = name
        self.description = description
        self.strength = strength
        self.deposits = deposits
        self.requirements = requirements
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case symbol
        case name
        case description
        case strength
        case deposits
        case requirements
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(symbol, forKey: .symbol)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(strength, forKey: .strength)
        try container.encodeIfPresent(deposits, forKey: .deposits)
        try container.encode(requirements, forKey: .requirements)
    }
}

