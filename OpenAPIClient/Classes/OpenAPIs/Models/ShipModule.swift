//
// ShipModule.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A module can be installed in a ship and provides a set of capabilities such as storage space or quarters for crew. Module installations are permanent. */
public struct ShipModule: Codable, JSONEncodable, Hashable {

    public enum Symbol: String, Codable, CaseIterable {
        case mineralProcessorI = "MODULE_MINERAL_PROCESSOR_I"
        case cargoHoldI = "MODULE_CARGO_HOLD_I"
        case crewQuartersI = "MODULE_CREW_QUARTERS_I"
        case envoyQuartersI = "MODULE_ENVOY_QUARTERS_I"
        case passengerCabinI = "MODULE_PASSENGER_CABIN_I"
        case microRefineryI = "MODULE_MICRO_REFINERY_I"
        case oreRefineryI = "MODULE_ORE_REFINERY_I"
        case fuelRefineryI = "MODULE_FUEL_REFINERY_I"
        case scienceLabI = "MODULE_SCIENCE_LAB_I"
        case jumpDriveI = "MODULE_JUMP_DRIVE_I"
        case jumpDriveIi = "MODULE_JUMP_DRIVE_II"
        case jumpDriveIii = "MODULE_JUMP_DRIVE_III"
        case warpDriveI = "MODULE_WARP_DRIVE_I"
        case warpDriveIi = "MODULE_WARP_DRIVE_II"
        case warpDriveIii = "MODULE_WARP_DRIVE_III"
        case shieldGeneratorI = "MODULE_SHIELD_GENERATOR_I"
        case shieldGeneratorIi = "MODULE_SHIELD_GENERATOR_II"
    }
    static let capacityRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let rangeRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public var symbol: Symbol
    public var capacity: Int?
    public var range: Int?
    public var name: String
    public var description: String?
    public var requirements: ShipRequirements

    public init(symbol: Symbol, capacity: Int? = nil, range: Int? = nil, name: String, description: String? = nil, requirements: ShipRequirements) {
        self.symbol = symbol
        self.capacity = capacity
        self.range = range
        self.name = name
        self.description = description
        self.requirements = requirements
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case symbol
        case capacity
        case range
        case name
        case description
        case requirements
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(symbol, forKey: .symbol)
        try container.encodeIfPresent(capacity, forKey: .capacity)
        try container.encodeIfPresent(range, forKey: .range)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encode(requirements, forKey: .requirements)
    }
}

