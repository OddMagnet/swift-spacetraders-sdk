//
// ShipyardTransaction.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ShipyardTransaction: Codable, JSONEncodable, Hashable {

    static let priceRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    /** The symbol of the waypoint where the transaction took place. */
    public var waypointSymbol: String
    /** The symbol of the ship that was purchased. */
    public var shipSymbol: String
    /** The price of the transaction. */
    public var price: Int
    /** The symbol of the agent that made the transaction. */
    public var agentSymbol: String
    /** The timestamp of the transaction. */
    public var timestamp: Date

    public init(waypointSymbol: String, shipSymbol: String, price: Int, agentSymbol: String, timestamp: Date) {
        self.waypointSymbol = waypointSymbol
        self.shipSymbol = shipSymbol
        self.price = price
        self.agentSymbol = agentSymbol
        self.timestamp = timestamp
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case waypointSymbol
        case shipSymbol
        case price
        case agentSymbol
        case timestamp
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(waypointSymbol, forKey: .waypointSymbol)
        try container.encode(shipSymbol, forKey: .shipSymbol)
        try container.encode(price, forKey: .price)
        try container.encode(agentSymbol, forKey: .agentSymbol)
        try container.encode(timestamp, forKey: .timestamp)
    }
}

