//
// Market.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/**  */
public struct Market: Codable, JSONEncodable, Hashable {

    /** The symbol of the market. The symbol is the same as the waypoint where the market is located. */
    public var symbol: String
    /** The list of goods that are exported from this market. */
    public var exports: [TradeGood]
    /** The list of goods that are sought as imports in this market. */
    public var imports: [TradeGood]
    /** The list of goods that are bought and sold between agents at this market. */
    public var exchange: [TradeGood]
    /** The list of recent transactions at this market. Visible only when a ship is present at the market. */
    public var transactions: [MarketTransaction]?
    /** The list of goods that are traded at this market. Visible only when a ship is present at the market. */
    public var tradeGoods: [MarketTradeGood]?

    public init(symbol: String, exports: [TradeGood], imports: [TradeGood], exchange: [TradeGood], transactions: [MarketTransaction]? = nil, tradeGoods: [MarketTradeGood]? = nil) {
        self.symbol = symbol
        self.exports = exports
        self.imports = imports
        self.exchange = exchange
        self.transactions = transactions
        self.tradeGoods = tradeGoods
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case symbol
        case exports
        case imports
        case exchange
        case transactions
        case tradeGoods
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(symbol, forKey: .symbol)
        try container.encode(exports, forKey: .exports)
        try container.encode(imports, forKey: .imports)
        try container.encode(exchange, forKey: .exchange)
        try container.encodeIfPresent(transactions, forKey: .transactions)
        try container.encodeIfPresent(tradeGoods, forKey: .tradeGoods)
    }
}

