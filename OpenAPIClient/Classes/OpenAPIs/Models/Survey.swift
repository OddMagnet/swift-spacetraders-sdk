//
// Survey.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A resource survey of a waypoint, detailing a specific extraction location and the types of resources that can be found there. */
public struct Survey: Codable, JSONEncodable, Hashable {

    public enum Size: String, Codable, CaseIterable {
        case small = "SMALL"
        case moderate = "MODERATE"
        case large = "LARGE"
    }
    static let signatureRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let symbolRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    /** A unique signature for the location of this survey. This signature is verified when attempting an extraction using this survey. */
    public var signature: String
    /** The symbol of the waypoint that this survey is for. */
    public var symbol: String
    /** A list of deposits that can be found at this location. */
    public var deposits: [SurveyDeposit]
    /** The date and time when the survey expires. After this date and time, the survey will no longer be available for extraction. */
    public var expiration: Date
    /** The size of the deposit. This value indicates how much can be extracted from the survey before it is exhausted. */
    public var size: Size

    public init(signature: String, symbol: String, deposits: [SurveyDeposit], expiration: Date, size: Size) {
        self.signature = signature
        self.symbol = symbol
        self.deposits = deposits
        self.expiration = expiration
        self.size = size
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case signature
        case symbol
        case deposits
        case expiration
        case size
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(signature, forKey: .signature)
        try container.encode(symbol, forKey: .symbol)
        try container.encode(deposits, forKey: .deposits)
        try container.encode(expiration, forKey: .expiration)
        try container.encode(size, forKey: .size)
    }
}

