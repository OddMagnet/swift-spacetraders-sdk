//
// ShipEngine.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The engine determines how quickly a ship travels between waypoints. */
public struct ShipEngine: Codable, JSONEncodable, Hashable {

    public enum Symbol: String, Codable, CaseIterable {
        case impulseDriveI = "ENGINE_IMPULSE_DRIVE_I"
        case ionDriveI = "ENGINE_ION_DRIVE_I"
        case ionDriveIi = "ENGINE_ION_DRIVE_II"
        case hyperDriveI = "ENGINE_HYPER_DRIVE_I"
    }
    static let conditionRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 100, exclusiveMaximum: false, multipleOf: nil)
    static let speedRule = NumericRule<Double>(minimum: 1, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public var symbol: Symbol
    public var name: String
    public var description: String
    /** Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new. */
    public var condition: Int?
    public var speed: Double
    public var requirements: ShipRequirements

    public init(symbol: Symbol, name: String, description: String, condition: Int? = nil, speed: Double, requirements: ShipRequirements) {
        self.symbol = symbol
        self.name = name
        self.description = description
        self.condition = condition
        self.speed = speed
        self.requirements = requirements
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case symbol
        case name
        case description
        case condition
        case speed
        case requirements
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(symbol, forKey: .symbol)
        try container.encode(name, forKey: .name)
        try container.encode(description, forKey: .description)
        try container.encodeIfPresent(condition, forKey: .condition)
        try container.encode(speed, forKey: .speed)
        try container.encode(requirements, forKey: .requirements)
    }
}

