//
// MarketTransaction.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct MarketTransaction: Codable, JSONEncodable, Hashable {

    public enum ModelType: String, Codable, CaseIterable {
        case purchase = "PURCHASE"
        case sell = "SELL"
    }
    static let unitsRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let pricePerUnitRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let totalPriceRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    /** The symbol of the waypoint where the transaction took place. */
    public var waypointSymbol: String
    /** The symbol of the ship that made the transaction. */
    public var shipSymbol: String
    /** The symbol of the trade good. */
    public var tradeSymbol: String
    /** The type of transaction. */
    public var type: ModelType
    /** The number of units of the transaction. */
    public var units: Int
    /** The price per unit of the transaction. */
    public var pricePerUnit: Int
    /** The total price of the transaction. */
    public var totalPrice: Int
    /** The timestamp of the transaction. */
    public var timestamp: Date

    public init(waypointSymbol: String, shipSymbol: String, tradeSymbol: String, type: ModelType, units: Int, pricePerUnit: Int, totalPrice: Int, timestamp: Date) {
        self.waypointSymbol = waypointSymbol
        self.shipSymbol = shipSymbol
        self.tradeSymbol = tradeSymbol
        self.type = type
        self.units = units
        self.pricePerUnit = pricePerUnit
        self.totalPrice = totalPrice
        self.timestamp = timestamp
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case waypointSymbol
        case shipSymbol
        case tradeSymbol
        case type
        case units
        case pricePerUnit
        case totalPrice
        case timestamp
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(waypointSymbol, forKey: .waypointSymbol)
        try container.encode(shipSymbol, forKey: .shipSymbol)
        try container.encode(tradeSymbol, forKey: .tradeSymbol)
        try container.encode(type, forKey: .type)
        try container.encode(units, forKey: .units)
        try container.encode(pricePerUnit, forKey: .pricePerUnit)
        try container.encode(totalPrice, forKey: .totalPrice)
        try container.encode(timestamp, forKey: .timestamp)
    }
}

