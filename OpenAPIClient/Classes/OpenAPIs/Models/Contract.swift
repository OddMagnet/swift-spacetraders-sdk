//
// Contract.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/**  */
public struct Contract: Codable, JSONEncodable, Hashable {

    public enum ModelType: String, Codable, CaseIterable {
        case procurement = "PROCUREMENT"
        case transport = "TRANSPORT"
        case shuttle = "SHUTTLE"
    }
    static let idRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let factionSymbolRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var id: String
    /** The symbol of the faction that this contract is for. */
    public var factionSymbol: String
    public var type: ModelType
    public var terms: ContractTerms
    /** Whether the contract has been accepted by the agent */
    public var accepted: Bool = false
    /** Whether the contract has been fulfilled */
    public var fulfilled: Bool = false
    /** The time at which the contract expires */
    public var expiration: Date

    public init(id: String, factionSymbol: String, type: ModelType, terms: ContractTerms, accepted: Bool = false, fulfilled: Bool = false, expiration: Date) {
        self.id = id
        self.factionSymbol = factionSymbol
        self.type = type
        self.terms = terms
        self.accepted = accepted
        self.fulfilled = fulfilled
        self.expiration = expiration
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case factionSymbol
        case type
        case terms
        case accepted
        case fulfilled
        case expiration
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(factionSymbol, forKey: .factionSymbol)
        try container.encode(type, forKey: .type)
        try container.encode(terms, forKey: .terms)
        try container.encode(accepted, forKey: .accepted)
        try container.encode(fulfilled, forKey: .fulfilled)
        try container.encode(expiration, forKey: .expiration)
    }
}

