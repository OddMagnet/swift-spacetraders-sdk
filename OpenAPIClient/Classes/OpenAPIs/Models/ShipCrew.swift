//
// ShipCrew.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The ship&#39;s crew service and maintain the ship&#39;s systems and equipment. */
public struct ShipCrew: Codable, JSONEncodable, Hashable {

    public enum Rotation: String, Codable, CaseIterable {
        case strict = "STRICT"
        case relaxed = "RELAXED"
    }
    static let moraleRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 100, exclusiveMaximum: false, multipleOf: nil)
    static let wagesRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    /** The current number of crew members on the ship. */
    public var current: Int
    /** The minimum number of crew members required to maintain the ship. */
    public var _required: Int
    /** The maximum number of crew members the ship can support. */
    public var capacity: Int
    /** The rotation of crew shifts. A stricter shift improves the ship's performance. A more relaxed shift improves the crew's morale. */
    public var rotation: Rotation = .strict
    /** A rough measure of the crew's morale. A higher morale means the crew is happier and more productive. A lower morale means the ship is more prone to accidents. */
    public var morale: Int
    /** The amount of credits per crew member paid per hour. Wages are paid when a ship docks at a civilized waypoint. */
    public var wages: Int

    public init(current: Int, _required: Int, capacity: Int, rotation: Rotation = .strict, morale: Int, wages: Int) {
        self.current = current
        self._required = _required
        self.capacity = capacity
        self.rotation = rotation
        self.morale = morale
        self.wages = wages
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case current
        case _required = "required"
        case capacity
        case rotation
        case morale
        case wages
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(current, forKey: .current)
        try container.encode(_required, forKey: ._required)
        try container.encode(capacity, forKey: .capacity)
        try container.encode(rotation, forKey: .rotation)
        try container.encode(morale, forKey: .morale)
        try container.encode(wages, forKey: .wages)
    }
}

